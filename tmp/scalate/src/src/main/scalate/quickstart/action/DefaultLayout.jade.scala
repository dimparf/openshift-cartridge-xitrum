/* NOTE this file is autogenerated by Scalate : see http://scalate.fusesource.org/ */
package src.main.scalate.quickstart.action

import _root_.scala.collection.JavaConversions._
import _root_.org.fusesource.scalate.support.TemplateConversions._
import _root_.org.fusesource.scalate.util.Measurements._

object $_scalate_$DefaultLayout_jade {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    import _root_.org.fusesource.scalate.support.RenderHelper.{sanitize=>$_scalate_$_sanitize, preserve=>$_scalate_$_preserve, indent=>$_scalate_$_indent, smart_sanitize=>$_scalate_$_smart_sanitize, attributes=>$_scalate_$_attributes}
    ;{
      val helper: xitrum.Action = $_scalate_$_context.attribute("helper")
      import helper._
      ;{
        val context: org.fusesource.scalate.RenderContext = $_scalate_$_context.attribute("context")
        import context._
        
        
                import quickstart.action._

        $_scalate_$_context << ( "<!DOCTYPE html>\n<html>\n  <head>\n    " );
        $_scalate_$_context << ( $_scalate_$_indent ( "    ", $_scalate_$_context.valueUnescaped(
           antiCsrfMeta
        ) ) );
        $_scalate_$_context << ( "\n    " );
        $_scalate_$_context << ( $_scalate_$_indent ( "    ", $_scalate_$_context.valueUnescaped(
           xitrumCss
        ) ) );
        $_scalate_$_context << ( "\n    <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"/>\n    <title>My new Xitrum project</title>\n    <link" );
        $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
            "rel"
          ,
            "shortcut icon"
          ), (
            "href"
          ,
                        publicUrl("favicon.ico")

        ) ) )
        $_scalate_$_context << ( "/>\n    <link" );
        $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
            "type"
          ,
            "text/css"
          ), (
            "rel"
          ,
            "stylesheet"
          ), (
            "media"
          ,
            "all"
          ), (
            "href"
          ,
                        webJarsUrl("bootstrap/3.2.0/css", "bootstrap.css", "bootstrap.min.css")

        ) ) )
        $_scalate_$_context << ( "/>\n    <link" );
        $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
            "type"
          ,
            "text/css"
          ), (
            "rel"
          ,
            "stylesheet"
          ), (
            "media"
          ,
            "all"
          ), (
            "href"
          ,
                        publicUrl("app.css")

        ) ) )
        $_scalate_$_context << ( "/>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>\n        <a" );
        $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
            "href"
          ,
                        url[SiteIndex]

        ) ) )
        $_scalate_$_context << ( ">My new Xitrum project</a>\n      </h1>\n      <div id=\"flash\">\n        " );
        $_scalate_$_context << ( $_scalate_$_preserve ( $_scalate_$_context.valueUnescaped(
           jsRenderFlash()
        ) ) );
        $_scalate_$_context << ( "\n      </div>\n      " );
        $_scalate_$_context << ( $_scalate_$_indent ( "      ", $_scalate_$_context.valueUnescaped(
           renderedView
        ) ) );
        $_scalate_$_context << ( "\n    </div>\n    " );
        $_scalate_$_context << ( $_scalate_$_indent ( "    ", $_scalate_$_context.valueUnescaped(
           jsDefaults
        ) ) );
        $_scalate_$_context << ( "\n    " );
        $_scalate_$_context << ( $_scalate_$_indent ( "    ", $_scalate_$_context.valueUnescaped(
           jsForView
        ) ) );
        $_scalate_$_context << ( "\n  </body>\n</html>\n" );
      }
    }
  }
}


class $_scalate_$DefaultLayout_jade extends _root_.org.fusesource.scalate.Template {
  def render(context: _root_.org.fusesource.scalate.RenderContext): Unit = $_scalate_$DefaultLayout_jade.$_scalate_$render(context)
}
